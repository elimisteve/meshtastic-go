// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: apponly.proto

package go_meshtastic_protobufs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// This message wraps a MeshPacket with extra metadata about the sender and how it arrived.
type ServiceEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// The (probably encrypted) packet
	Packet *MeshPacket `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	//
	// The global channel ID it was sent on
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	//
	// The sending gateway. Can we use this to authenticate/prevent fake
	// nodeid impersonation for senders? - i.e. use gateway/mesh id (which is authenticated) + local node id as
	// the globally trusted nodenum
	GatewayId string `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *ServiceEnvelope) Reset() {
	*x = ServiceEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apponly_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceEnvelope) ProtoMessage() {}

func (x *ServiceEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_apponly_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceEnvelope.ProtoReflect.Descriptor instead.
func (*ServiceEnvelope) Descriptor() ([]byte, []int) {
	return file_apponly_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceEnvelope) GetPacket() *MeshPacket {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *ServiceEnvelope) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ServiceEnvelope) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

//
// This is the most compact possible representation for a set of channels.  It includes only one PRIMARY channel (which must be first) and
// any SECONDARY channels.  No DISABLED channels are included.
// This abstraction is used only on the the 'app side' of the world (ie python, javascript and android etc) to show a group of Channels as a (long) URL
type ChannelSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*ChannelSettings `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ChannelSet) Reset() {
	*x = ChannelSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apponly_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSet) ProtoMessage() {}

func (x *ChannelSet) ProtoReflect() protoreflect.Message {
	mi := &file_apponly_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSet.ProtoReflect.Descriptor instead.
func (*ChannelSet) Descriptor() ([]byte, []int) {
	return file_apponly_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelSet) GetSettings() []*ChannelSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

var File_apponly_proto protoreflect.FileDescriptor

var file_apponly_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x4d, 0x65, 0x73, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x41, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65, 0x65, 0x6b, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x42, 0x0d, 0x41, 0x70, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x48, 0x03, 0x5a, 0x19, 0x2e, 0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apponly_proto_rawDescOnce sync.Once
	file_apponly_proto_rawDescData = file_apponly_proto_rawDesc
)

func file_apponly_proto_rawDescGZIP() []byte {
	file_apponly_proto_rawDescOnce.Do(func() {
		file_apponly_proto_rawDescData = protoimpl.X.CompressGZIP(file_apponly_proto_rawDescData)
	})
	return file_apponly_proto_rawDescData
}

var file_apponly_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_apponly_proto_goTypes = []interface{}{
	(*ServiceEnvelope)(nil), // 0: ServiceEnvelope
	(*ChannelSet)(nil),      // 1: ChannelSet
	(*MeshPacket)(nil),      // 2: MeshPacket
	(*ChannelSettings)(nil), // 3: ChannelSettings
}
var file_apponly_proto_depIdxs = []int32{
	2, // 0: ServiceEnvelope.packet:type_name -> MeshPacket
	3, // 1: ChannelSet.settings:type_name -> ChannelSettings
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_apponly_proto_init() }
func file_apponly_proto_init() {
	if File_apponly_proto != nil {
		return
	}
	file_mesh_proto_init()
	file_channel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_apponly_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apponly_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apponly_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apponly_proto_goTypes,
		DependencyIndexes: file_apponly_proto_depIdxs,
		MessageInfos:      file_apponly_proto_msgTypes,
	}.Build()
	File_apponly_proto = out.File
	file_apponly_proto_rawDesc = nil
	file_apponly_proto_goTypes = nil
	file_apponly_proto_depIdxs = nil
}
